#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Package System Setup
** Straight.el setup

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (setq evil-want-keybinding nil)
#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-hide-results t)
    (auto-package-update-delete-old-versions t))
#+end_src

* Startup Performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  (when (not (version< emacs-version "26.3"))
    (use-package no-littering))

  (when (not (version< emacs-version "26.3"))
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

* Directories

#+begin_src emacs-lisp
  (defvar phd-thesis-dir "~/Documents/GithubProjects/phd-thesis")
  (defvar current-semester-dir
    (concat phd-thesis-dir
            "/Documents/Semesters/2023/Fall"))
  (defvar maxdiff-org-files-dir
    (concat phd-thesis-dir
            "/Documents/Side-Projects/MaxDiff/Documents/org"))
  (defvar maxdiff-write-ups-dir
    (concat phd-thesis-dir
            "/Documents/Side-Projects/MaxDiff/Documents/notes"))

  (defvar phd-thesis-write-ups-dir
    (concat phd-thesis-dir
            "/Documents/Write-Ups"))
  (defvar phd-thesis-org-files-dir
    (concat phd-thesis-dir
            "/Documents/Org-Files"))

  (defvar scc-dir
    (concat phd-thesis-dir
            "/Documents/Side-Projects/kapur-nsf-proposal/2022"))
  (defvar scc-reports-dir (concat scc-dir "/Reports"))
  (defvar scc-org-files-dir (concat scc-dir "/Org-Files"))

  (defvar seminar-dir
    (concat phd-thesis-dir
            "/Documents/Seminars/BeihangUniversity-Fall2021"))
  (defvar seminar-org-files-dir (concat seminar-dir "/Org-Files"))
  (defvar ta1-tasks-mail
    (concat current-semester-dir "/TA-CS-105/Org-Files/current_tasks.org"))
  (defvar ta2-tasks-mail
    (concat current-semester-dir "/TA-CS-561/Org-Files/current_tasks.org"))

  (defvar maxdiff-agenda-mail
    (concat maxdiff-org-files-dir "/agenda.org"))

  (defvar agenda-mail
    (concat phd-thesis-org-files-dir "/main.org"))
  (defvar research-tasks-mail
    (concat phd-thesis-org-files-dir "/research_tasks.org"))
  (defvar dissertation-tasks-mail
    (concat phd-thesis-org-files-dir "/dissertation_tasks.org"))
  (defvar graduation-logistics-tasks-mail
    (concat phd-thesis-org-files-dir "/graduation_logistics.org"))
  (defvar lunch-tasks-mail
    (concat phd-thesis-org-files-dir "/lunch_tasks.org"))
  (defvar side-tasks-mail
    (concat phd-thesis-org-files-dir "/side_tasks.org"))
  (defvar scc-tasks-mail
    (concat scc-org-files-dir "/scc_tasks.org"))
  (defvar school-tasks-mail
    (concat phd-thesis-org-files-dir "/school_tasks.org"))
  (defvar seminar-tasks-mail
    (concat seminar-org-files-dir "/seminar_tasks.org"))
  (defvar seminar-meetings
    (concat seminar-org-files-dir "/meeting_notes.org"))
#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

In order to start up a daemon, use the following command
#+begin_src 

launchctl load -w ~/Library/LaunchAgents/.emacs-daemon.plist  
launchctl unload -w ~/Library/LaunchAgents/.emacs-daemon.plist  
launchctl load -w ~/Library/LaunchAgents/.emacs-daemon.plist  

#+end_src

The content of .emacs-daemon.plist is

#+begin_src

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
 <plist version="1.0">
<dict>
  <key>Label</key>
  <string>gnu.emacs.daemon</string>
  <key>ProgramArguments</key>
  <array>
    <string>/opt/homebrew/bin/emacs</string>
    <string>--with-profile=jose</string>
    <string>--daemon</string>
  </array>
 <key>RunAtLoad</key>
 <true/>
 <key>ServiceDescription</key>
 <string>Gnu Emacs Daemon</string>
</dict>
</plist>

#+end_src

#+begin_src emacs-lisp
  (defvar efs/frame-transparency '(100 . 100))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)               ; Disable visible scrollbar
  (tool-bar-mode -1)                 ; Disable the toolbar
  (tooltip-mode -1)                  ; Disable tooltips
  (set-fringe-mode 10)               ; Give some breathing room

  (menu-bar-mode -1)                 ; Disable the menu bar
  (setq make-backup-files nil)
  (winner-mode 1)                    ; Enable winner mode
  (setq winner-dont-bind-my-keys t)

  (server-start)                     ; Start server
  (setq process-connection-type nil) ; Use pipes
  (setq history-length 25)
  (savehist-mode 1)
  (save-place-mode 1)
  (setq use-dialog-box nil)

  (setq ring-bell-function 'ignore)
  (setq confirm-kill-emacs #'y-or-n-p)

  (column-number-mode)
  (setq-default display-line-numbers-type 'visual)
  (when (not (version< emacs-version "26.3"))
    (global-display-line-numbers-mode t))

                                          ; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

                                          ; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  vterm-mode-hook
                  mu4e-headers-mode-hook
                  mu4e-view-mode-hook
                  mu4e-main-mode-hook
                  mu4e-org-mode-hook
                  mu4e-compose-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-to-list 'auto-mode-alist '("\\.dat\\'" . text-mode))
  (add-to-list 'auto-mode-alist '("\\.dat-s\\'" . text-mode))
#+end_src

** Dashboard Configuration

#+begin_src emacs-lisp
  (defvar dashboard-logo-path "~/Pictures/Wallpapers/figures/480px-EmacsIcon.svg.png")

  (use-package all-the-icons)

  (when (not (version< emacs-version "26.1"))
    (use-package dashboard
      :ensure t
      :config
                                          ; (setq dashboard-center-content t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-navigator t)
      (setq dashboard-banner-logo-title "Welcome to Emacs!")
      (when (file-exists-p dashboard-logo-path)
        (setq dashboard-startup-banner dashboard-logo-path))
      (setq dashboard-items '((recents  . 10)
                              (bookmarks . 10)
                              (projects . 5)))
      (dashboard-setup-startup-hook)))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src

** Tabbar setting

#+begin_src emacs-lisp
  (setq tab-bar-show 1)                      ; hide bar if <= 1 tabs open
  (setq tab-bar-new-tab-choice "*dashboard*"); buffer to show in new tabs
  (setq tab-bar-tab-hints t)                 ; show tab numbers
  (setq tab-bar-new-tab-to 'rightmost)       ; defines where to create a new tab
  (set-face-attribute 'tab-bar nil
                      :background "#282828"
                      :foreground "gray60" :distant-foreground "gray50"
                      :height 1.0 :box nil)
  (set-face-attribute 'tab-bar-tab nil
                      :background "#B8BB26"
                      :foreground "black" :distant-foreground "gray60"
                      :height 1.0 :box nil)
  (set-face-attribute 'tab-bar-tab-inactive nil
                      :background "#282828"
                      :foreground "white" :distant-foreground "gray50"
                      :height 1.0 :box nil)

  (set-face-attribute 'tab-line nil ; background behind tabs
                      :background "gray40"
                      :foreground "gray60" :distant-foreground "gray50"
                      :height 1.0 :box nil)
                                          ; (set-face-attribute 'tab-line-tab nil ; active tab in another window
                                          ;                    :inherit 'tab-line
                                          ;                    :foreground "gray70" :background "gray90" :box nil)
                                          ; (set-face-attribute 'tab-line-tab-current nil ; active tab in current window
                                          ;                     :background "#b34cb3" :foreground "white" :box nil)
                                          ; (set-face-attribute 'tab-line-tab-inactive nil ; inactive tab
                                          ;                    :background "gray60" :foreground "black" :box nil)
                                          ; (set-face-attribute 'tab-line-highlight nil ; mouseover
                                          ;                    :background "white" :foreground 'unspecified)
#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp
  (defun frame-font-setup
      (&rest ...)
                                          ; (remove-hook 'focus-in-hook #'frame-font-setup)
    (unless (assoc 'font default-frame-alist)
      (let* ((font-family (catch 'break
                            (dolist (font-family
                                     '("Fira Code"
                                       "Hack"
                                       "Consolas"))
                              (when (member font-family (font-family-list))
                                (throw 'break font-family)))))
             (font (when font-family (format "%s-18" font-family))))
        (when font
          (add-to-list 'default-frame-alist (cons 'font font))
          (set-frame-font font t t)))))

  (add-hook 'focus-in-hook #'frame-font-setup)

  (defun change-font-size (size)
    (interactive "n")
    (set-face-attribute 'default nil :height size))
#+end_src

** Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  (defun toggle-zoom-pane ()
    (interactive)
    (if (get 'is-pane-zoomed 'state)
        (progn
          (winner-undo)
          (setq mode-line-misc-info "")
          (put 'is-pane-zoomed 'state nil))
      (progn
        (delete-other-windows)
        (setq mode-line-misc-info "[\ueb81]")
        (put 'is-pane-zoomed 'state t))))

  (define-key (current-global-map) (kbd "C-w") nil)
  (define-key (current-global-map) (kbd "C-w z") 'toggle-zoom-pane)

  (defun persp-exit ()
    (interactive)
    (prog1
        (persp-state-save "~/.config/jose-emacs/.emacs-session-mac")
      (save-buffers-kill-terminal)))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key [(control x) (k)] 'kill-buffer)

                                          ; Unbind C-@ in order to make it a global-prefix for general
  (global-unset-key (kbd "C-SPC"))
  (global-unset-key (kbd "C-@"))

  (when (eq system-type 'darwin) ; mac specific settings
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta))

  (use-package general
    :after evil
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
      "a" '(:ignore t :which-key "(a)vy")
      "ac" '(avy-goto-char :which-key "(c)haracter")
      "aw" '(avy-goto-word-0 :which-key "(w)ord")
      "r" '(:ignore t :which-key "bookma(r)k")
      "rs" '(bookmark-set :which-key "bookmark (s)et")
      "rj" '(bookmark-jump :which-key "bookmark (j)ump")
      "rd" '(bookmark-delete :which-key "bookmark (d)elete")
      "b" '(:ignore t :which-key "edit (b)uffer")
      "bc"  '(evilnc-comment-or-uncomment-lines :which-key "(c)omment line")
      "bf"  '(fill-paragraph :which-key "(f)ill paragraph")
      "bi"  '((lambda () (interactive)
                (indent-region (point-min) (point-max)))
              :which-key "(i)ndent buffer")
      "by" '(simpleclip-copy :which-key "clipboard (y)ank")
      "bs" '(insert-snake :which-key "insert (s)nake")
      "bp" '(simpleclip-paste :which-key "clipboard (p)aste")
      "f" '(hydra-jump-files/body :which-key "edit (f)iles")
      "s"  '(shell-command :which-key "(s)hell command")
      "t"  '(:ignore t :which-key "(t)oggles/(t)abs")
      "tt" '(load-theme :which-key "choose (t)heme")
      "ts" '(tab-switch :which-key "(s)witch tab")
      "td" '(tab-duplicate :which-key "tab (d)uplicate")
      "tn" '(tab-new :which-key "(n)ew tab")
      "tc" '(tab-close :which-key "(c)lose tab")
      "th" '(tab-previous :which-key "move to left tab")
      "tl" '(tab-next :which-key "move to right tab")
      "tr" '(tab-rename :which-key "(r)ename tab")
      "g" '(magit-status :which-key "Ma(g)it status")
      "d" '(dired-jump :which-key "(d)ired jump")
      "m" '(mu4e :which-key "(m)u4e")
      "w" '(:ignore t :which-key "(w)indows related")
      "wz" '(toggle-zoom-pane :which-key "Zoom toggle")
      "wu" '(winner-undo :which-key "Winner (u)ndo")
      "wr" '(winner-redo :which-key "Winner (r)edo")))

  (use-package better-jumper
    :after (evil god-mode)
    :config
    (better-jumper-mode +1)
    (define-key god-local-mode-map (kbd "o") 'better-jumper-jump-backward)
    (define-key god-local-mode-map (kbd "u") 'better-jumper-jump-forward)
    (define-key evil-motion-state-map (kbd "C-u")
      'better-jumper-jump-forward)
    (define-key evil-motion-state-map (kbd "C-o")
      'better-jumper-jump-backward))
#+end_src

*** God mode

#+begin_src emacs-lisp
  (use-package god-mode
    :config
    (global-set-key (kbd "s-g") #'god-mode-all)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)
    (global-set-key
     (kbd "C-g")
     (lambda () (interactive) (prog1 (god-local-mode) (keyboard-escape-quit))))
    (setq god-mode-alist '((nil . "C-") ("g" . "M-") ("G" . "C-M-")))
    (setq god-mode-enable-function-key-translation nil)
    (setq god-exempt-major-modes nil)
    (setq god-exempt-predicates nil))
#+end_src

*** Evil mode

#+begin_src emacs-lisp
  (use-package evil-god-state)

  (use-package diminish)

  (use-package evil
    :after (god-mode evil-god-state diminish)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g")
      'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h")
      'evil-delete-backward-char-and-join)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (evil-define-key
      'normal global-map ","
      'evil-execute-in-god-state)
    (add-hook 'evil-god-state-entry-hook
              (lambda () (diminish 'god-local-mode)))
    (add-hook 'evil-god-state-exit-hook
              (lambda () (diminish-undo 'god-local-mode)))
    (evil-define-key
      'god global-map [escape]
      'evil-god-state-bail))

  (when (not (version< emacs-version "26.3"))
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init)
      (setq forge-add-default-bindings nil)))

  (use-package evil-numbers
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))
#+end_src

* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

** Color Theme
*** Doom themes

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))
#+end_src

*** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package anzu)

  (use-package evil-anzu
    :after evil
    :config (global-anzu-mode 1)
    (setq anzu-minimum-input-length 4))

  (when (not (version< emacs-version "26.3"))
    (use-package doom-modeline
      :config (doom-modeline-mode 1)
      :custom (
               (doom-modeline-height 15)
               (doom-modeline-enable-word-count t)
               (doom-modeline-continuous-word-count-modes
                '(markdown-mode gfm-mode org-mode text-mode)))))
#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1)
    (which-key-enable-god-mode-support))
#+end_src

** Flx

#+begin_src emacs-lisp
  (use-package flx)
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (when (not (version< emacs-version "27.1"))
    (use-package marginalia
                                          ; Either bind `marginalia-cycle` globally or only in the minibuffer
      :bind (("M-A" . marginalia-cycle)
             :map minibuffer-local-map
             ("M-A" . marginalia-cycle))

                                          ; The :init configuration is always executed (Not lazy!)
      :init
                                          ; Must be in the :init section of use-package such that the mode gets
                                          ; enabled right away. Note that this forces loading the package.
      (marginalia-mode)))
#+end_src

** Embark

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.1"))
    (use-package embark
      :ensure t
      :bind
      (
       ("C-c C-." . embark-act)         ; pick some comfortable binding
       ("C-;" . embark-dwim)        ; good alternative: M-.
       ("C-h B" . embark-bindings) ; alternative for `describe-bindings'
       :map embark-file-map
       ("t" . find-file-other-tab)) 
      :init
                                          ; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)
      :config
      (add-to-list 'marginalia-prompt-categories '("tab by name" . tab))
                                          ; Hide the mode line of the Embark live/completions buffers 
      (require 'embark)
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none))))
      (defvar-keymap embark-file-map
        :doc "Example keymap with a few file actions"
        :parent embark-general-map
        "t" #'find-file-other-tab)))

  (when (not (version< emacs-version "27.1"))
    (use-package embark-consult
      :ensure t ; only need to install it, embark loads it after consult if found
      :after (embark consult)
      :demand t
      :hook
      (embark-collect-mode . consult-preview-at-point-mode)
      :init
      (with-eval-after-load 'embark
        (require 'embark-consult))))
#+end_src

** Vertico

#+begin_src emacs-lisp
  (when (not (version< emacs-version "27.1"))
    (use-package vertico
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("C-<return>" . vertico-exit-input)
                  ("DEL" . vertico-directory-delete-char)
                  ("C-h" . vertico-directory-delete-word))
      :init
      (vertico-mode)
      (vertico-multiform-mode)))
#+end_src

** Orderless

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.1"))
    (use-package orderless
      :demand t
      :init
                                          ; Configure a custom style dispatcher (see the Consult wiki)
                                          ; (setq orderless-style-dispatchers '(+orderless-dispatch)
                                          ;       orderless-component-separator #'orderless-escapable-split-on-space)
      (setq completion-styles '(basic substring partial-completion orderless)
            completion-category-defaults nil
            completion-category-overrides '((file (styles partial-completion))))
      :config
      (setq orderless-matching-styles '(orderless-flex))))
#+end_src

** Consult

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.3"))
    (use-package consult
      :after (vertico perspective)
                                          ; Replace bindings. Lazily loaded due by `use-package'.
      :bind (; C-x bindings (ctl-x-map)
             ("C-x M-:" . consult-complex-command)     ; orig. repeat-complex-command
             ("C-x 4 b" . consult-buffer-other-window) ; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ; orig. switch-to-buffer-other-frame
             ("C-x r b" . consult-bookmark)            ; orig. bookmark-jump
             ("C-x p b" . consult-project-buffer)      ; orig. project-switch-to-buffer
                                          ; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
                                          ; Other custom bindings
             ("M-y" . consult-yank-pop)                ; orig. yank-pop
             ("<help> a" . consult-apropos)            ; orig. apropos-command
                                          ; M-g bindings (goto-map)
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ; orig. goto-line
             ("M-g o" . consult-outline)               ; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
                                          ; M-s bindings (search-map)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s L" . consult-line-multi)
             ("M-s m" . consult-multi-occur)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
                                          ; C-c bindings
             ("C-c C-b" . consult-buffer)                ; orig. switch-to-buffer
             ("C-s"     . consult-line)
             ("C-c C-f" . consult-find)
             ("C-c D" . consult-locate)
             ("C-c h" . consult-history)
             ("C-c m" . consult-mode-command)
             ("C-c k" . consult-kmacro)
             ("C-c C-g" . consult-grep)
                                          ; Isearch integration
             ("M-s e" . consult-isearch-history)
             :map isearch-mode-map
             ("M-e" . consult-isearch-history)         ; orig. isearch-edit-string
             ("M-s e" . consult-isearch-history)       ; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi)            ; needed by consult-line to detect isearch
                                          ; Minibuffer history
             :map minibuffer-local-map
             ("M-s" . consult-history)                 ; orig. next-matching-history-element
             ("M-r" . consult-history))                ; orig. previous-matching-history-element

      :hook (completion-list-mode . consult-preview-at-point-mode)

                                          ; The :init configuration is always executed (Not lazy)
      :init
                                          ; preview for `consult-register', `consult-register-load',
                                          ; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      (advice-add #'register-preview :override #'consult-register-window)

                                          ; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)

                                          ; Configure other variables and modes in the :config section,
                                          ; after lazily loading the package.
      :config
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)
      (setq consult-project-root-function (lambda () (project-root (project-current))))
                                          ; Optionally configure preview. The default value
                                          ; is 'any, such that any key triggers the preview.
                                          ; (setq consult-preview-key 'any)
                                          ; (setq consult-preview-key (kbd "M-."))
                                          ; (setq consult-preview-key (list (kbd "<S-down>") (kbd
                                          ;"<S-up>")))
                                          ; For some commands and buffer sources it is useful to
                                          ; configure the
                                          ; :preview-key on a per-command basis using the
                                          ;`consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-recent-file
       consult--source-project-recent-file)

                                          ; Optionally configure the narrowing key.
                                          ; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ; (kbd "C-+")

                                          ; Optionally make narrowing help available in the minibuffer.
                                          ; You may want to use `embark-prefix-help-command' or which-key
                                          ;instead.
                                          ; (define-key consult-narrow-map (vconcat consult-narrow-key
                                          ;"?") #'consult-narrow-help)

                                          ; By default `consult-project-function' uses `project-root'
                                          ;from project.el.
                                          ; Optionally configure a different project root function.
                                          ; There are multiple reasonable alternatives to chose from.
                                          ; 1. project.el (the default)
                                          ; (setq consult-project-function
                                          ;#'consult--default-project--function)
                                          ; 2. projectile.el (projectile-project-root)
                                          ; (autoload 'projectile-project-root "projectile")
                                          ; (setq consult-project-function (lambda (_)
                                          ; (projectile-project-root)))
                                          ; 3. vc.el (vc-root-dir)
                                          ; (setq consult-project-function (lambda (_) (vc-root-dir)))
                                          ; 4. locate-dominating-file
                                          ; (setq consult-project-function (lambda (_)
                                          ; (locate-dominating-file "." ".git")))
      ))

  (defun consult-grep-current-dir ()
    "Call `consult-grep' for the current buffer (a single file)."
    (interactive)
    (let ((consult-project-function (lambda (x) "./")))
      (consult-grep)))

  (defun consult-find-current-dir ()
    "Call `consult-find' for the current buffer (a single file)."
    (interactive)
    (let ((consult-project-function (lambda (x) "./")))
      (consult-find)))
#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-jump-files (:exit t)
    "jump to files"
    ("a" (find-file
          (expand-file-name (concat phd-thesis-org-files-dir "/main.org")))
     "Agenda")
    ("e" (find-file
          (expand-file-name "config.org" user-emacs-directory))
     "Emacs config")
    ("w" (find-file
          (expand-file-name
           (concat seminar-dir "/Reports/2023/monogenic_certificates_compact_case/main.tex")))
     "Current report")
    ("rp" (find-file
           (expand-file-name (concat phd-thesis-write-ups-dir "/references.bib")))
     "Bibtex references - PhD thesis")
    ("rs" (find-file
           (expand-file-name (concat scc-reports-dir "/references.bib")))
     "Bibtex references - SCC project"))

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("k" text-scale-increase "in")
    ("j" text-scale-decrease "out")
    ("c" change-font-size "change font size" :exit t)
    ("q" nil "finished" :exit t))

  (efs/leader-keys
    "tf" '(hydra-text-scale/body :which-key "change (f)ont size"))
#+end_src

** Zoom

#+begin_src emacs-lisp
  (use-package zoom
    :config
    (setq zoom-size '(0.618 . 0.618)))
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
                                          ; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

                                          ; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Hack" :weight 'regular :height (cdr face)))

    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (when (not (version< emacs-version "26.3"))
      (set-face-attribute 'line-number nil :inherit 'fixed-pitch))
    (when (not (version< emacs-version "26.3"))
      (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)))
#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
  (when (not (version< (org-version) "9.2"))
    (with-eval-after-load 'org
                                          ; This is needed as of Org 9.2
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))))
#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-file-apps
          '((auto-mode . emacs)
            (directory . emacs)
            ("\\.mm\\'" . default)
            ("\\.x?html?\\'" . default)
            ("\\.pdf\\'" . "sioyek %s")
            ("\\.nb?\\'" . "Mathematica %s")))

    (setq org-ellipsis "⇓")
    (setq org-hierarchical-todo-statistics nil)

    (setq
     org-agenda-files
     '(
       "~/Documents/GithubProjects/phd-thesis/Documents/Misc/20231115200616-qm_seminar.org"
       "~/Documents/GithubProjects/phd-thesis/Documents/Org-Files/research_tasks.org"
       "~/Documents/GithubProjects/phd-thesis/Documents/Org-Files/school_tasks.org"
       "~/Documents/GithubProjects/phd-thesis/Documents/Org-Files/graduation_logistics.org"
       "~/Documents/GithubProjects/phd-thesis/Documents/Org-Files/dissertation_tasks.org"
       "~/Documents/GithubProjects/phd-thesis/Documents/Org-Files/main.org"
       ))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (require 'org-protocol)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "EXTERNAL" "|")
            (sequence "GOAL" "IDEA" "OBSERVATION" "|" "OK")
            (sequence "TODAY" "TODO" "LATER" "|" "MOVED" "COMPLETED(c)" "CANC(k@)")
            (sequence "EMAIL" "|")))

                                          ; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

                                          ; Use find-file instead of file-find-other-window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    (setq org-capture-templates
          `(
            ("e" "Email Capture")
            ("ea" "Main Agenda" entry
             (file+olp agenda-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("ed" "Dissertation Tasks" entry
             (file+olp dissertation-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("eg" "Graduation Logistics" entry
             (file+olp graduation-logistics-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("er" "Research Tasks" entry
             (file+olp research-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("el" "Lunch Tasks" entry
             (file+olp lunch-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("es" "S..")
            ("esc" "School Tasks" entry
             (file+olp school-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("est" "Seminar Tasks" entry
             (file+olp seminar-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("esm" "Seminar Meetings" plain
             (file+function seminar-meetings (lambda () (goto-line 5)))
             "%a"
             :prepend t
             :immediate-finish t)
            ("et" "TA Task")
            ("etu" "CS 105 - Fall 2023" entry
             (file+olp ta1-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("eto" "CS 561 - Fall 2023" entry
             (file+olp ta2-tasks-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ("em" "MaxDiff Agenda" entry
             (file+olp maxdiff-agenda-mail "EMAIL")
             "** TODO Check this email %a"
             :immediate-finish t)
            ))

    (define-key org-mode-map (kbd "C-c d")
      (lambda () (interactive) (org-todo "MOVED")))
    (define-key org-mode-map (kbd "C-c c")
      (lambda () (interactive) (org-todo "COMPLETED")))
    (define-key org-mode-map (kbd "C-c t")
      (lambda () (interactive) (org-todo "TODO")))
    (define-key org-mode-map (kbd "C-c k")
      (lambda () (interactive) (org-todo "CANC")))
    (define-key org-mode-map (kbd "C-c i")
      (lambda () (interactive) (org-todo "IDEA")))
    (define-key org-mode-map (kbd "C-c o")
      (lambda () (interactive) (org-todo "OK")))
    (define-key org-mode-map (kbd "C-c C-<return>")
      'org-insert-heading-respect-content)
    (define-key org-mode-map (kbd "C-c C-<SPC>")
      'org-insert-subheading)
    (define-key org-mode-map (kbd "C-c RET")
      'org-meta-return)
    (define-key org-mode-map (kbd "C-c s")
      (lambda () (interactive) (org-sort-buffer)))

    (efs/org-font-setup))

  (efs/leader-keys
    "o" '(:ignore t :which-key "(o)rg")
    "oc" '(org-capture nil :which-key "org-(c)apture"))

  (use-package org-mime
    :ensure t)

  (defun org-sort-buffer ()
    "Sort all entries in the current buffer, recursively."
    (interactive)
    (mark-whole-buffer)
    (org-sort-entries nil ?o)
    (org-map-entries (lambda ()
                       (condition-case x
                           (org-sort-entries nil ?o)
                         (user-error)))))
#+end_src

Update org-latex-classes

#+begin_src emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("myarticle"
                 "\\documentclass{article}
                    [NO-DEFAULT-PACKAGES]
                   \\usepackage{symbols}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("myreport"
                 "\\documentclass[peerreview]{IEEEtran}
                    [NO-DEFAULT-PACKAGES]
                   \\usepackage{symbols}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** Org download

#+begin_src emacs-lisp
  (use-package org-download)
#+end_src

*** Org roam

#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/GithubProjects/phd-thesis/Documents/Misc")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
        :unnarrowed t)
       ("l" "lecture" plain
        (file "~/Documents/GithubProjects/phd-thesis/Documents/Misc/Templates/lecture.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
        :unnarrowed t)
       ("m" "meeting" plain
        (file "~/Documents/GithubProjects/phd-thesis/Documents/Misc/Templates/meeting.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n s" . org-roam-db-sync)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           ("C-<return>" . vertico-exit-input))
    :config
    (org-roam-setup))
#+end_src

*** Ox Hugo

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.3"))
    (use-package ox-hugo
      :ensure t
      :pin melpa
      :after ox))
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp
  (defun fill-buffer ()
    (interactive)
    (save-excursion
      (save-restriction
        (widen)
        (fill-region (point-min) (point-max)))))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook ((org-mode . efs/org-mode-visual-fill)
           (markdown-mode . efs/org-mode-visual-fill)
           (TeX-mode . efs/org-mode-visual-fill)
           (LaTeX-mode . efs/org-mode-visual-fill)
           (mu4e-main-mode . efs/org-mode-visual-fill)))
#+end_src

*** Olivetti

#+begin_src emacs-lisp
  (use-package olivetti
    :custom
    (olivetti-body-width 130))
#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Development
** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp
  (use-package projectile
    :after orderless
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'orderless))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
                                          ; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Documents/GithubProjects")
      (setq projectile-project-search-path '("~/Documents/GithubProjects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

** Yasnippet setup

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs `(,(expand-file-name "snippets" user-emacs-directory)))
    (setq yas-key-syntaxes '(yas-longest-key-from-whitespace "w_.()" "w_." "w_" "w"))
    (define-key yas-minor-mode-map (kbd "C-g") 'evil-normal-state)
    (define-key yas-keymap (kbd "C-g") 'evil-normal-state)
    (yas-global-mode 1))

  (use-package yasnippet-snippets)

  (load (expand-file-name "snippets/yasnippet-scripts.el" user-emacs-directory))

  (defun restart-yasnippet ()
    (interactive)
    (add-hook 'post-command-hook #'my-yas-try-expanding-auto-snippets))
#+end_src

** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :bind (("C-x k" . persp-kill-buffer*)
           ("C-x C-b" . consult-buffer))
    :custom
    (persp-mode-prefix-key (kbd "M-p"))
    :init
    (persp-mode))
#+end_src

** Avy

#+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-all-windows 'all-frames)
    (global-set-key (kbd "C-:") 'avy-goto-char))
#+end_src

** Languages
*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (when (not (version< emacs-version "26.1"))
    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-l")
      :config
      (setq lsp-completion-provider :none)
      (defun corfu-lsp-setup ()
        (setq-local completion-styles '(orderless)
                    completion-category-defaults nil))
      (add-hook 'lsp-mode-hook #'corfu-lsp-setup)
      (lsp-enable-which-key-integration t)))
#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.1"))
    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom)))
#+end_src

**** tree-sitter

#+begin_src emacs-lisp
  (when (fboundp 'module-load)
    (use-package tree-sitter
      :commands (treesit-install-language-grammar nf/treesit-install-all-languages)
      :hook ((latex-mode python-mode rustic-mode) . tree-sitter-hl-mode)
      :init
      (setq treesit-language-source-alist
            '((latex . ("https://github.com/latex-lsp/tree-sitter-latex"))))
      :config
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(rustic-mode . rust))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(TeX-mode . latex))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(LaTeX-mode . latex))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(latex-mode . latex))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(bibtex-mode . bibtex))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(org-mode . org))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(c-mode . c))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(cpp-mode . cpp))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(python-mode . python))
      (add-to-list 'tree-sitter-major-mode-language-alist
                   '(typescript-mode . typescript))
      (defun nf/treesit-install-all-languages ()
        "Install all languages specified by `treesit-language-source-alist'."
        (interactive)
        (let ((languages (mapcar 'car treesit-language-source-alist)))
          (dolist (lang languages)
            (treesit-install-language-grammar lang)
            (message "`%s' parser was installed." lang)

            (sit-for 0.75))))))

  (when (fboundp 'module-load)
    (use-package tree-sitter-langs
      :after tree-sitter))
#+end_src

**** treemacs

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.1"))
    (use-package treemacs
      :bind
      (:map global-map
            ([f4] . treemacs)
            ([f5] . treemacs-select-window))
      :config
      (setq treemacs-is-never-other-window t)))
#+end_src

**** treemacs-evil 

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.1"))
    (use-package treemacs-evil
      :after treemacs evil))
#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

  This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

  #+begin_src emacs-lisp
    (when (not (version< emacs-version "26.1"))
      (use-package lsp-treemacs
        :after lsp))
  #+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp
                                          ; (when (not (version< emacs-version "26.1"))
                                          ;   (use-package dap-mode
                                          ;                                         ; :custom
                                          ;                                         ; (lsp-enable-dap-auto-configure nil)
                                          ;                                         ; :config
                                          ;                                         ; (dap-ui-mode 1)
                                          ;     :commands dap-debug
                                          ;     :config
                                          ;                                         ; Set up Node debugging
                                          ;     (require 'dap-node)
                                          ;     (dap-node-setup) ; Automatically installs Node debug adapter if needed

                                          ;                                         ; Bind `C-c l d` to `dap-hydra` for easy access
                                          ;     (general-define-key
                                          ;      :keymaps 'lsp-mode-map
                                          ;      :prefix lsp-keymap-prefix
                                          ;      "d" '(dap-hydra t :wk "debugger"))))
#+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no
  npm install -g typescript-language-server typescript
#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Rust

#+begin_src emacs-lisp
  (use-package rustic)
#+end_src

*** C/C++

#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
#+end_src

*** Latex

Use this setup for Skim.  Select Skim > Preferences...
- Preset: Custom
- Command: emacsclient
- Arguments: -s jose --no-wait +%line "%file"
Use `CMD + shift + click` on a pdf section to back forward.

#+begin_src emacs-lisp 
  (add-hook 'TeX-mode-hook 'lsp)
  (add-hook 'LaTeX-mode-hook 'lsp)

  (add-hook 'TeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (add-hook 'TeX-mode-hook #'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook #'auto-fill-mode)
  (setq-default fill-column 80)

  (add-hook 'TeX-mode-hook #'display-fill-column-indicator-mode)
  (add-hook 'LaTeX-mode-hook #'display-fill-column-indicator-mode)

  (when (not (version< emacs-version "26.1"))
    (use-package lsp-latex
      :bind (:map lsp-mode-map
                  ("C-l w r" . lsp-workspace-restart)
                  ("C-l w b" . lsp-latex-build))
      :config
                                          ; (setq lsp-completion-provider :none)
                                          ; (setq auto-complete-mode -1)
      (setq lsp-latex-build-executable "latexmk")
      (setq lsp-latex-build-args
            '("-pvc" "-pdf" "-interaction=nonstopmode" "-synctex=1" "-cd" "%f"))
      (setq lsp-latex-forward-search-after t)
      (setq lsp-latex-build-on-save t)
      (setq lsp-latex-forward-search-executable "/opt/homebrew/bin/sioyek")
      (setq lsp-latex-forward-search-args
            '( "--reuse-window"
               "--inverse-search"
               "/opt/homebrew/bin/emacsclient -s jose --no-wait +%2 \"%1\""
               "--forward-search-file"
               "%f"
               "--forward-search-line"
               "%l"
               "%p"))))

  (defun get-bibtex-from-doi (doi)
    "Get a BibTeX entry from the DOI"
    (interactive "MDOI: ")
    (let ((url-mime-accept-string "text/bibliography;style=bibtex"))
      (with-current-buffer
          (url-retrieve-synchronously
           (format "http://dx.doi.org/%s"
                   (replace-regexp-in-string "http://dx.doi.org/" "" doi)))
        (switch-to-buffer (current-buffer))
        (goto-char (point-max))
        (setq bibtex-entry
              (buffer-substring
               (string-match "@" (buffer-string))
               (point)))
        (kill-buffer (current-buffer))))
    (insert (decode-coding-string bibtex-entry 'utf-8))
    (bibtex-fill-entry))
#+end_src

**** AUCTex setup

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.3"))
    (use-package tex
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (setq reftex-plug-into-AUCTeX t)
      (setq reftex-insert-label-flags (list t nil))
      (setq reftex-ref-macro-prompt nil)
      (setq font-latex-fontify-script nil)))

  (add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))

  (efs/leader-keys
    "l" '(:ignore t :which-key "(l)atex related")
    "lp" '((lambda () (interactive)
             (yasnippet/goto-parent-file))
           :which-key "Goto (p)arent")
    "lF" '((lambda () (interactive)
             (LaTeX-fill-buffer nil))
           :which-key "Latex (F)ill buffer")
    "lf" '((lambda () (interactive)
             (lsp-latex-forward-search))
           :which-key "Latex (f)orward search"))
#+end_src

**** Citar

#+begin_src emacs-lisp
  (when (not (version< emacs-version "27.1"))
    (use-package citar
      :bind (("C-c b" . citar-insert-citation)
             :map minibuffer-local-map
             ("M-b" . citar-insert-preset))
      :custom
      (citar-bibliography `(,(concat scc-reports-dir "/references.bib")
                            ,(concat maxdiff-write-ups-dir "/references.bib")
                            ,(concat phd-thesis-write-ups-dir "/references.bib")))))
#+end_src

*** Typst

#+begin_src emacs-lisp
  (use-package typst-mode
    :straight
    (:type git
           :host github
           :repo "Ziqi-Yang/typst-mode.el"))
#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no
  pip install --user "python-language-server[all]"
#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3")
                                          ; (dap-python-executable "python3")
                                          ; (dap-python-debugger 'debugpy)
    :config
                                          ; (require 'dap-python)
    (setq python-indent-offset 2)
    (setq python-indent 2)
    (add-hook 'python-mode-hook
              (function (lambda ()
                          (setq indent-tabs-mode nil
                                tab-width 2)))))
#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

*** Maple mode

#+begin_src emacs-lisp
  (use-package maplev
    :straight (maplev :type git
                      :host github
                      :repo "JoeRiel/maplev")
    :config
    (add-to-list 'auto-mode-alist '("\\.mpl\\'" . maplev-mode))
    (add-to-list 'auto-mode-alist '("\\.mm\\'" . maplev-mode)))
#+end_src

*** Mathematica mode

#+begin_src emacs-lisp
  (use-package wolfram-mode
    :config
    (setq wolfram-program "/usr/local/bin/MathKernel")
    (setq wolfram-path "~/.Mathematica")
    (add-to-list 'auto-mode-alist '("\\.m\\'" . wolfram-mode))
    (add-to-list 'auto-mode-alist '("\\.wl\\'" . wolfram-mode)))
#+end_src

*** TOML mode

#+begin_src emacs-lisp
  (use-package toml-mode)
#+end_src

*** Z3 mode

#+begin_src emacs-lisp
  (use-package boogie-friends
    :config
    (setq
     flycheck-z3-executable
     "~/Documents/GithubProjects/CAXDInterpolator/dependencies/z3-interp-plus/build/z3"))
#+end_src

*** Lean

#+begin_src emacs-lisp
  (use-package lean4-mode
    :straight (lean4-mode :type git
                          :host github
                          :repo "leanprover/lean4-mode")
    :commands (lean4-mode))
#+end_src

*** Racket

#+begin_src emacs-lisp
  (setq scheme-program-name "racket")
  (setq auto-mode-alist
        (cons '("\\.rkt\\'" . scheme-mode)
              auto-mode-alist))

  (defun run-scheme2 ()
    "Run scheme-program-name and disable geiser-mode."
    (interactive)
    (split-window-right)
    (geiser-mode -1)
    (windmove-right)
    (run-scheme scheme-program-name))

  (defun run-scheme3 ()
    "Run scheme-program-name and disable geiser-mode."
    (interactive)
    (split-window-right)
    (windmove-right)
    (run-scheme scheme-program-name))
#+end_src

*** Haskell

Install a language server to enable lsp. For example, [[https://formulae.brew.sh/formula/haskell-language-server][=brew install haskell-language-server=]].

#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
                                          ;:hook (haskell-mode . lsp-deferred)
    :config
    (setq haskell-program-name "/usr/bin/ghci")
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
                                          ; Choose indentation mode (the latter requires haskell-mode >= 2.5):
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
                                          ; (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    )
  (use-package lsp-haskell)
#+end_src

*** Pairinfer

#+begin_src emacs-lisp
  (use-package parinfer
    :disabled
    :hook ((clojure-mode . parinfer-mode)
           (emacs-lisp-mode . parinfer-mode)
           (common-lisp-mode . parinfer-mode)
           (scheme-mode . parinfer-mode)
           (lisp-mode . parinfer-mode))
    :config
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             evil           ; If you use Evil.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank)))  ; Yank behavior depend on mode.

  (efs/leader-keys
    "tp" 'parinfer-toggle-mode)
#+end_src

** Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :after orderless
                                          ; Optional customizations
    :general
    (:keymaps 'corfu-map
              :states 'insert
              "C-n" #'corfu-next
              "C-p" #'corfu-previous
              "<return>" #'corfu-insert
              "M-d" #'corfu-show-documentation
              "M-l" #'corfu-show-location)
    :custom
    (corfu-cycle t)                ; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ; Enable auto completion
    (corfu-separator ?\s)          ; Orderless field separator
                                          ; (corfu-quit-at-boundary nil)
                                          ; Never quit at completion boundary
                                          ; (corfu-quit-no-match nil)
                                          ; Never quit, even if there is no match
                                          ; (corfu-preview-current nil)
                                          ; Disable current candidate preview
                                          ; (corfu-preselect 'prompt)
                                          ; Preselect the prompt
                                          ; (corfu-on-exact-match nil)
                                          ; Configure handling of exact matches
    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)
    (corfu-scroll-margin 5)        ; Use scroll margin
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 3)
                                          ; (completion-styles '(basic))

                                          ; Enable Corfu only for certain modes.
                                          ; :hook ((prog-mode . corfu-mode)
                                          ;        (shell-mode . corfu-mode)
                                          ;        (eshell-mode . corfu-mode))

                                          ; Recommended: Enable Corfu globally.
                                          ; This is recommended since Dabbrev can be used
                                          ; globally (M-/).
                                          ; See also `global-corfu-modes'.
    :config
    (setq corfu-popupinfo-delay 0.2)
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons nil)
                                          ; Have background color be the same as `corfu' face
                                          ; background
    (kind-icon-default-face 'corfu-default)
                                          ; Use midpoint color between foreground and background
                                          ; colors
                                          ; ("blended")?
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)

    ;; NOTE 2022-02-05: `kind-icon' depends `svg-lib' which creates a cache
    ;; directory that defaults to the `user-emacs-directory'. Here, I change that
    ;; directory to a location appropriate to `no-littering' conventions, a
    ;; package which moves directories of other packages to sane locations.
    (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/")) ; Change cache dir
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'

    ;; Add hook to reset cache so the icon colors match my theme
    ;; NOTE 2022-02-05: This is a hook which resets the cache whenever I switch
    ;; the theme using my custom defined command for switching themes. If I don't
    ;; do this, then the backgound color will remain the same, meaning it will not
    ;; match the background color corresponding to the current theme. Important
    ;; since I have a light theme and dark theme I switch between. This has no
    ;; function unless you use something similar
    (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache))))
#+end_src

** Cape

#+begin_src emacs-lisp
  (use-package cape
                                          ; Bind dedicated completion commands
                                          ; Alternative prefix keys: C-c p, M-p, M-+, ...
                                          ;:bind (("C-c p p" . completion-at-point) ; capf
                                          ;       ("C-c p t" . complete-tag)        ; etags
                                          ;       ("C-c p d" . cape-dabbrev)        ; or
                                          ; dabbrev-completion
                                          ;       ("C-c p h" . cape-history)
                                          ;       ("C-c p f" . cape-file)
                                          ;       ("C-c p k" . cape-keyword)
                                          ;       ("C-c p s" . cape-elisp-symbol)
                                          ;       ("C-c p e" . cape-elisp-block)
                                          ;       ("C-c p a" . cape-abbrev)
                                          ;       ("C-c p l" . cape-line)
                                          ;       ("C-c p w" . cape-dict)
                                          ;       ("C-c p :" . cape-emoji)
                                          ;       ("C-c p \\" . cape-tex)
                                          ;       ("C-c p _" . cape-tex)
                                          ;       ("C-c p ^" . cape-tex)
                                          ;       ("C-c p &" . cape-sgml)
                                          ;       ("C-c p r" . cape-rfc1345))
    :init
                                          ; Add to the global default value of
                                          ; `completion-at-point-functions' which is
                                          ; used by `completion-at-point'.  The order of the functions
                                          ; matters, the
                                          ; first function returning a result wins.  Note that the list
                                          ; of buffer-local
                                          ; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
                                          ; (add-to-list 'completion-at-point-functions
                                          ; #'cape-elisp-block)
                                          ; (add-to-list 'completion-at-point-functions #'cape-history)
                                          ; (add-to-list 'completion-at-point-functions #'cape-keyword)
                                          ; (add-to-list 'completion-at-point-functions #'cape-tex)
                                          ; (add-to-list 'completion-at-point-functions #'cape-sgml)
                                          ; (add-to-list 'completion-at-point-functions #'cape-rfc1345)
                                          ; (add-to-list 'completion-at-point-functions #'cape-abbrev)
                                          ; (add-to-list 'completion-at-point-functions #'cape-dict)
                                          ; (add-to-list 'completion-at-point-functions
                                          ; #'cape-elisp-symbol)
                                          ; (add-to-list 'completion-at-point-functions #'cape-line)
    )

  (use-package yasnippet-capf
    :after cape
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf)
    (setq yasnippet-capf-lookup-by 'name))
#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.3"))
    (use-package magit
      :commands magit-status
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)))

  (when (not (version< emacs-version "26.3"))
    (use-package forge
      :after magit))
#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :after evil
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
  (when (not (version< emacs-version "26.3"))
    (use-package rainbow-mode))
#+end_src

** Rainbow delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** FZF

#+begin_src emacs-lisp
  (use-package fzf
    :bind
                                          ; Don't forget to set keybinds!
    :config
    (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
          fzf/executable "fzf"
          fzf/git-grep-args "-i --line-number %s"
                                          ; command used for `fzf-grep-*` functions
                                          ; example usage for ripgrep:
                                          ; fzf/grep-command "rg --no-heading -nH"
          fzf/grep-command "grep -nrH"
                                          ; If nil, the fzf buffer will appear at the top of the window
          fzf/position-bottom t
          fzf/window-height 15))
#+end_src

** Chat GPT client

#+begin_src emacs-lisp
  (use-package gptel
    :straight
    (:type git
           :host github
           :repo "karthink/gptel")
    :config
    (setq gptel-api-key
          (let ((key (shell-command-to-string "pass personal/chatgpt")))
            (string-trim key))))
#+end_src

* Terminals
** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

  #+begin_src emacs-lisp
    (use-package term
      :commands term
      :config
      (setq explicit-shell-file-name "zsh")
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
  #+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

**** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

  One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

  #+begin_src emacs-lisp
    (when (eq system-type 'windows-nt)
      (setq explicit-shell-file-name "powershell.exe")
      (setq explicit-powershell.exe-args '()))
  #+end_src

** eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

  We will be covering Eshell more in future videos highlighting other things you can do with it.

  For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
  - https://ambrevar.xyz/emacs-eshell/index.html
  - https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

    #+begin_src emacs-lisp
      (defun efs/configure-eshell ()
                                              ; Save command history when commands are entered
        (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

                                              ; Truncate buffer for performance
        (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

                                              ; Bind some useful keys for evil-mode
        (evil-define-key
          '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
        (evil-define-key
          '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
        (evil-normalize-keymaps)

        (setq eshell-history-size         10000
              eshell-buffer-maximum-lines 10000
              eshell-hist-ignoredups t
              eshell-scroll-to-bottom-on-input t))

      (use-package eshell-git-prompt
        :after eshell)

      (use-package eshell
        :hook (eshell-first-time-mode . efs/configure-eshell)
        :config

        (with-eval-after-load 'esh-opt
          (setq eshell-destroy-buffer-when-process-dies t)
          (setq eshell-visual-commands '("htop" "zsh" "vim")))

        (eshell-git-prompt-use-theme 'powerline))
    #+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000))
#+end_src

* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

  *Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump evil)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq dired-guess-shell-alist-user '(("\\.nb?\\'" "Mathematica")
                                         ("\\.pdf\\'" "sioyek")))
    (when (not (version< emacs-version "26.3"))
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer)))

  (put 'dired-find-alternate-file 'disabled nil)

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (setq dired-listing-switches "-al --group-directories-first")

  (use-package dired-single
    :commands (dired dired-jump))

  (when (not (version< emacs-version "26.1"))
    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode)))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
                                          ; Doesn't work as expected!
                                          ; (add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

* Applications
** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no
  (+ 55 100)
#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src conf :tangle no :noweb yes
  value=<<the-value()>>
#+end_src

** Scripts

#+begin_src emacs-lisp
  (defun snakify (input)
    (replace-regexp-in-string
     " "
     "_"
     (downcase input)))

  (defun insert-snake ()
    (interactive)
    (insert (snakify (car kill-ring))))

  (defun reftexify ()
    (interactive)
    (shell-command "~/.local/scripts/reftexify"))
#+end_src

** Presentation mode with org-tree-slide

#+begin_src emacs-lisp
  (use-package hide-mode-line)

  (defun efs/presentation-setup ()
    (setq text-scale-mode-amount 3)
    (hide-mode-line-mode 1)
    (org-display-inline-images)
    (text-scale-mode 1))

  (defun efs/presentation-end ()
    (hide-mode-line-mode 0)
    (text-scale-mode 0)
    (efs/org-mode-setup)
    (efs/org-mode-visual-fill))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . efs/presentation-setup)
           (org-tree-slide-stop . efs/presentation-end))
    :custom
    (org-tree-slide-slide-in-effect t)
    (org-tree-slide-activate-message "Presentation started!")
    (org-tree-slide-deactivate-message "Presentation finished!")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " // ")
    (org-image-actual-width nil))

  (efs/leader-keys
    "p" '(:ignore t :which-key "(p)resentation")
    "pp" '(org-tree-slide-move-previous-tree :which-key "Previous slide")
    "pn" '(org-tree-slide-move-next-tree  :which-key "Next slide"))
#+end_src

** System Clipboard

#+begin_src emacs-lisp
  (use-package simpleclip
    :config
    (simpleclip-mode 1))
#+end_src

** Markdown-EWW preview

#+begin_src emacs-lisp
  (use-package markdown-preview-eww)
#+end_src

** sqlite3

#+begin_src emacs-lisp
  (use-package sqlite3)
#+end_src

** Managing mail with mu4e

Follow the following [[https://macowners.club/posts/email-emacs-mu4e-macos/][post]] to setup credential file in ~/.maildir/certificates. It is necessary to install isync. Use the brew package manager and follow xukai92 suggestion in this [[https://github.com/moriyoshi/cyrus-sasl-xoauth2/issues/9][git issue]], i.e. use 

#+begin_src
HOMEBREW_EDITOR=nvim brew edit isync
#+end_src

to remove url, sha256 entries, change the head entry with  https://github.com/xukai92/isync.git and recompile isync using 

#+begin_src 
brew reinstall isync --build
#+end_src

Additionally, install mu using your package manager and set it up with the following:

#+begin_src
mu init --maildir=~/Mail --my-address=ADDRESS1 --my-address=ADDRESS2
mu index
#+end_src

mu4e comes included with mu. Search the path your package manager used to installed it and use it to change :load-path in the following block:

#+begin_src emacs-lisp :tangle no
  (defvar efs/mu4e-path "/opt/homebrew/share/emacs/site-lisp/mu/mu4e/")

  (when (file-exists-p (concat efs/mu4e-path "mu4e.el"))
    (use-package mu4e
      :ensure nil
      :load-path (lambda () (expand-file-name efs/mu4e-path))
                                          ; :defer 20 ; Wait until 20 seconds after startup
      :init
      (setq mu4e-mu-binary "/opt/homebrew/bin/mu")
      :config
      (require 'mu4e)
      (require 'mu4e-org)

      (setq mu4e-change-filenames-when-moving t)

                                          ; SMTP settings
      (setq sendmail-program "/opt/homebrew/bin/msmtp"
            message-sendmail-f-is-evil t
            message-sendmail-extra-arguments '("--read-envelope-from")
            send-mail-function 'smtpmail-send-it
            message-send-mail-function 'message-send-mail-with-sendmail)

      (setq smtpmail-debug-info t)
      (setq starttls-use-gnutls t)

      (setq mu4e-update-interval 600)
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-root-maildir "~/Mail")

                                          ; Just plain text
      (with-eval-after-load "mm-decode"
        (add-to-list 'mm-discouraged-alternatives "text/html")
        (add-to-list 'mm-discouraged-alternatives "text/richtext"))

      (defun jcs-view-in-eww (msg)
        (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))
      (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

      (defun refile-func (msg)
        (cond
         ((mu4e-message-contact-field-matches msg :to "kapur@cs.unm.edu")
          "/unm/Prof. Kapur")
         ((mu4e-message-contact-field-matches msg :from "kapur@cs.unm.edu")
          "/unm/Prof. Kapur")
         ((mu4e-message-contact-field-matches msg :cc "kapur@cs.unm.edu")
          "/unm/Prof. Kapur")
         ((mu4e-message-contact-field-matches msg :to "kapur@unm.edu")
          "/unm/Prof. Kapur")
         ((mu4e-message-contact-field-matches msg :from "kapur@unm.edu")
          "/unm/Prof. Kapur")
         ((mu4e-message-contact-field-matches msg :cc "kapur@unm.edu")
          "/unm/Prof. Kapur")
         (t "/unm/Archive")))

      (setq mu4e-contexts
            (list
                                          ; School account
             (make-mu4e-context
              :name "School"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/unm" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address  . "jabelcastellanosjoo@unm.edu")
                      (user-full-name     . "Jose Abel Castellanos Joo")
                      (mu4e-drafts-folder . "/unm/Drafts")
                      (mu4e-sent-folder   . "/unm/Sent")
                      (mu4e-refile-folder . refile-func)
                      (mu4e-trash-folder  . "/unm/Trash")
                      (smtpmail-smtp-server . "smtp.office365.com")
                      (smtpmail-smtp-service . 587)
                      (smtpmail-debug-info . t)
                      (smtpmail-stream-type . starttls)))
                                          ; School CS department account
             (make-mu4e-context
              :name "CS department"
              :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/cs-unm" (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address  . "jose.castellanosjoo@cs.unm.edu")
                      (user-full-name     . "Jose Abel Castellanos Joo")
                      (mu4e-drafts-folder . "/cs-unm/Drafts")
                                          ; (mu4e-sent-folder   . "/cs-unm/Sent")
                      (mu4e-refile-folder . "/cs-unm/Inbox")
                      (mu4e-trash-folder  . "/cs-unm/Trash")
                      (smtpmail-smtp-server . "snape.cs.unm.edu")
                      (smtpmail-smtp-service . 1200)
                      (smtpmail-stream-type . starttls)))))

      (setq mu4e-context-policy 'pick-first)

      (setq mu4e-maildir-shortcuts
            '(("/unm/Inbox" . ?i)
              ("/unm/Sent"  . ?s)
              ("/unm/Trash" . ?t)
              ("/unm/Dissertation communication". ?d)
              ("/unm/Dissertation logistics". ?l)
              ("/unm/Prof. Kapur". ?k)
              ("/unm/Prof. Kapur/Side projects/Seminars/Beihang University". ?b)
              ("/unm/Prof. Kapur/Side projects/MaxDiff Extension". ?m)
              ("/unm/TA Work/CS 357". ?c)
              ("/unm/TA Work/CS 105 - Fall 2023". ?U)
              ("/unm/TA Work/CS 561 - Fall 2023". ?O)
              ("/unm/You got a Package!". ?p)
              ("/unm/ProFellow Info". ?f)
              ("/unm/Archive". ?a)
              ("/cs-unm/Inbox". ?I)
              ("/cs-unm/Trash". ?T)
              ("/cs-unm/Drafts". ?D)))
                                          ; UX settings
      (setq mu4e-use-fancy-chars t)
      (setq mu4e-attachment-dir  "~/tosend")
      (setq mu4e-headers-show-threads nil)
      (setq mu4e-confirm-quit nil)
      (setq mu4e-headers-results-limit -1)
      (setq mu4e-compose-signature "Best,\nJose")
      (setq message-citation-line-format "On %d %b %Y at %R, %f wrote:\n")
      (setq message-citation-line-function 'message-insert-formatted-citation-line)
      (setq mu4e-headers-fields '((:flags . 5)
                                  (:human-date . 12)
                                  (:from . 22)
                                  (:subject)))
                                          ; Display
      (setq
       mu4e-view-show-addresses t
       mu4e-view-show-images t
       mu4e-view-image-max-width 800
       mu4e-hide-index-messages t)
      (with-eval-after-load 'mu4e
        (load
         (expand-file-name
          "scripts/mu4e-view-save-all-attachments.el"
          user-emacs-directory)))))
#+end_src

** Spell checker

#+begin_src emacs-lisp
  (use-package jinx
    :config
    (add-to-list 'vertico-multiform-categories
                 '(jinx grid (vertico-grid-annotate . 20)))
    (vertico-multiform-mode 1))
#+end_src

** Atomic chrome
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'full)
    (setq atomic-chrome-url-major-mode-alist
          '(("github\\.com" . poly-markdown+r-mode)
            ("overleaf\\.com" . latex-mode))))
#+end_src
